/**
 * Simplified Bootstrap Select for compatibility
 * Compatible with jQuery 3.7.1 and Bootstrap 4.5.2
 */
(function($) {
    'use strict';
    
    var Selectpicker = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, $.fn.selectpicker.defaults, options);
        this.init();
    };
    
    Selectpicker.prototype = {
        init: function() {
            this.$element.hide();
            this.createView();
            this.setStyle();
            this.checkDisabled();
            this.addEvents();
            this.refresh();
        },
        
        createView: function() {
            var classes = this.$element.attr('class') || '';
            var multiple = this.$element.prop('multiple');
            var title = this.options.title || this.$element.attr('title') || 'اختر المناصب...';
            
            this.$newElement = $(
                '<div class="btn-group bootstrap-select">' +
                    '<button type="button" class="btn dropdown-toggle" data-toggle="dropdown">' +
                        '<span class="filter-option">' +
                            '<span class="filter-option-inner">' +
                                '<span class="filter-option-inner-inner">' + title + '</span>' +
                            '</span>' +
                        '</span>' +
                        '<span class="caret"></span>' +
                    '</button>' +
                    '<div class="dropdown-menu">' +
                        '<div class="inner">' +
                            '<ul class="dropdown-menu inner" role="listbox">' +
                            '</ul>' +
                        '</div>' +
                    '</div>' +
                '</div>'
            );
            
            this.$element.after(this.$newElement);
            this.$button = this.$newElement.find('button');
            this.$menu = this.$newElement.find('.dropdown-menu ul');
            this.$menuInner = this.$newElement.find('.inner');
            this.$filterOption = this.$newElement.find('.filter-option-inner-inner');
            
            // Add search box if live-search is enabled
            if (this.$element.attr('data-live-search') === 'true') {
                this.$menuInner.prepend(
                    '<div class="bs-searchbox">' +
                        '<input type="text" class="form-control" autocomplete="off" placeholder="بحث...">' +
                    '</div>'
                );
                this.$searchbox = this.$newElement.find('.bs-searchbox input');
            }
            
            this.createOptions();
        },
        
        createOptions: function() {
            var that = this;
            this.$menu.empty();
            
            this.$element.find('option').each(function(i) {
                var $this = $(this);
                var text = $this.text();
                var value = $this.val();
                var selected = $this.prop('selected');
                var disabled = $this.prop('disabled');
                
                var $li = $(
                    '<li' + (disabled ? ' class="disabled"' : '') + '>' +
                        '<a href="#" data-value="' + value + '">' +
                            '<span class="text">' + text + '</span>' +
                            (selected ? '<span class="check-mark">✓</span>' : '') +
                        '</a>' +
                    '</li>'
                );
                
                that.$menu.append($li);
            });
        },
        
        setStyle: function() {
            var classes = this.$element.attr('class');
            if (classes) {
                var btnClasses = classes.split(/\s+/).filter(function(cls) {
                    return cls.match(/^btn-/) || cls === 'form-control';
                });
                if (btnClasses.length === 0) {
                    btnClasses = ['btn-outline-secondary'];
                }
                this.$button.addClass(btnClasses.join(' '));
            } else {
                this.$button.addClass('btn-outline-secondary');
            }
        },
        
        checkDisabled: function() {
            if (this.$element.prop('disabled')) {
                this.$button.addClass('disabled').attr('disabled', true);
            }
        },
        
        addEvents: function() {
            var that = this;
            
            // Option click handler
            this.$menu.on('click', 'a', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                var $this = $(this);
                var value = $this.data('value');
                var $option = that.$element.find('option[value="' + value + '"]');
                var multiple = that.$element.prop('multiple');
                
                if ($this.parent().hasClass('disabled')) {
                    return;
                }
                
                if (multiple) {
                    $option.prop('selected', !$option.prop('selected'));
                } else {
                    that.$element.find('option').prop('selected', false);
                    $option.prop('selected', true);
                    that.$newElement.removeClass('show');
                }
                
                that.$element.trigger('change');
                that.refresh();
            });
            
            // Search functionality
            if (this.$searchbox) {
                this.$searchbox.on('input', function() {
                    var searchText = $(this).val().toLowerCase();
                    that.$menu.find('li').each(function() {
                        var $li = $(this);
                        var text = $li.find('.text').text().toLowerCase();
                        if (text.indexOf(searchText) === -1) {
                            $li.hide();
                        } else {
                            $li.show();
                        }
                    });
                });
            }
            
            // Element change handler
            this.$element.on('change', function() {
                that.refresh();
            });
        },
        
        refresh: function() {
            var selectedOptions = this.$element.find('option:selected');
            var multiple = this.$element.prop('multiple');
            
            // Update visual selection
            this.$menu.find('li').removeClass('selected');
            this.$menu.find('.check-mark').remove();
            
            selectedOptions.each(function() {
                var value = $(this).val();
                var $li = that.$menu.find('a[data-value="' + value + '"]').parent();
                $li.addClass('selected');
                $li.find('a').append('<span class="check-mark">✓</span>');
            });
            
            // Update button text
            if (selectedOptions.length === 0) {
                this.$filterOption.text(this.options.title || this.$element.attr('title') || 'اختر المناصب...');
                this.$button.removeClass('btn-outline-secondary').addClass('btn-outline-secondary');
            } else if (multiple) {
                if (selectedOptions.length > (this.options.selectedTextFormat === 'count > 2' ? 2 : 3)) {
                    var text = this.options.countSelectedText ? 
                        this.options.countSelectedText(selectedOptions.length, this.$element.find('option').length) :
                        selectedOptions.length + ' مناصب مختارة';
                    this.$filterOption.text(text);
                } else {
                    var texts = [];
                    selectedOptions.each(function() {
                        texts.push($(this).text());
                    });
                    this.$filterOption.text(texts.join(', '));
                }
                this.$button.removeClass('btn-outline-secondary').addClass('btn-primary');
            } else {
                this.$filterOption.text(selectedOptions.first().text());
                this.$button.removeClass('btn-outline-secondary').addClass('btn-primary');
            }
        },
        
        val: function(value) {
            if (typeof value !== 'undefined') {
                if (Array.isArray(value)) {
                    this.$element.find('option').prop('selected', false);
                    var that = this;
                    value.forEach(function(val) {
                        that.$element.find('option[value="' + val + '"]').prop('selected', true);
                    });
                } else {
                    this.$element.val(value);
                }
                this.refresh();
                return this;
            } else {
                return this.$element.val();
            }
        },
        
        selectAll: function() {
            this.$element.find('option').prop('selected', true);
            this.refresh();
            return this;
        },
        
        deselectAll: function() {
            this.$element.find('option').prop('selected', false);
            this.refresh();
            return this;
        },
        
        destroy: function() {
            this.$newElement.remove();
            this.$element.show();
            this.$element.removeData('selectpicker');
        }
    };
    
    var that = this;
    
    // Plugin definition
    $.fn.selectpicker = function(option, event) {
        var args = Array.prototype.slice.call(arguments, 1);
        var returnValue;
        
        this.each(function() {
            var $this = $(this);
            var data = $this.data('selectpicker');
            var options = typeof option === 'object' && option;
            
            if (!data) {
                $this.data('selectpicker', (data = new Selectpicker(this, options)));
            }
            
            if (typeof option === 'string') {
                if (data[option] instanceof Function) {
                    returnValue = data[option].apply(data, args);
                } else {
                    returnValue = data.options[option];
                }
            }
        });
        
        return typeof returnValue !== 'undefined' ? returnValue : this;
    };
    
    $.fn.selectpicker.defaults = {
        noneSelectedText: 'لم يتم اختيار أي منصب',
        selectedTextFormat: 'count > 2',
        countSelectedText: function(numSelected, numTotal) {
            return numSelected + ' مناصب مختارة';
        },
        title: null
    };
    
})(jQuery);
